#!/bin/bash
source cgroup-limits

set -e
set -o pipefail

# Include hidden files
shopt -s dotglob

# Set the umask to be '002' so that any files/directories created from
# this point are group writable.
umask 002

# Define some recommended flags
export NODE_RECOMMENDED_FLAGS=${NODE_RECOMMENDED_FLAGS-"--optimize_for_size --always_compact --gc_interval=100"}

# WEB_MEMORY defines the cluster memory limits
if [[ -n $WEB_MEMORY ]]; then
  # Check a valid number is provided (without MB)
  check-number $WEB_MEMORY

  node_memory=$WEB_MEMORY
  web_concurrency=$((MEMORY_LIMIT / WEB_MEMORY))
else
  node_memory=${MEMORY_LIMIT}
  web_concurrency=1
fi

# This is provided for convenience only
export WEB_CONCURRENCY=${WEB_CONCURRENCY:-$web_concurrency}

# Try to avoid spikes leading to crashes
max_semi_space_size=$((node_memory / 192))
[[ $max_semi_space_size -le 1 ]] && max_semi_space_size=2

# Define the maximum memory limit (total_limit = 90%)
if [ ${NODE_VERSION:0:1} == "4" ]; then
  # The v8 engine packaged with node4 uses max_old_space_size
  export NODE_OPTIONS=${NODE_OPTIONS:-"$NODE_RECOMMENDED_FLAGS --max_semi_space_size=$max_semi_space_size --max_old_space_size=$((node_memory * 80 / 100))"}
else
  export NODE_OPTIONS=${NODE_OPTIONS:-"$NODE_RECOMMENDED_FLAGS --max_semi_space_size=$max_semi_space_size --max-old-space-size=$((node_memory * 80 / 100))"}
fi

# Set the debug port and development environment
export NODE_ENV=${NODE_ENV:-"production"}
export NPM_RUN=${NPM_RUN:-"start"}
export DEBUG=${DEBUG:-"FALSE"}
export DEBUG_PORT=${DEBUG_PORT:-"5858"}

# Overwrite NODE_ENV when DEBUG==TRUE
if [ "$DEBUG" == "TRUE" ]; then
  export NODE_ENV=development
fi
